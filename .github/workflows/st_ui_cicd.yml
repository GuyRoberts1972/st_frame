name: Streamlit UI Build Test Deploy

on:
  # Manual run
  workflow_dispatch:

  # Tigger on unit test completion
  workflow_run:
    workflows:
      - Pytest
    types:
      - completed

# Need permissions to publish
permissions:
  contents: read
  packages: write

jobs:
  build-test-push:
    name: Build Docker Image
    runs-on: ubuntu-latest

    # Check success if this was tiggered by another workflow run
    if: ${{ github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}

    outputs:
      image_name: ${{ steps.build-image.outputs.image_name }}
      image_tag: ${{ steps.build-image.outputs.image_tag }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Ensure all shell scripts are executable
      run: find . -type f -name "*.sh" -exec chmod +x {} \;

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build Docker Image
      id: build-image
      run: ./st_ui/cicd/build_docker.sh

    - name: Pre Push Smoke Test
      run: |

        # Setup, test
        ./st_ui/cicd/setup_test_instance.sh
        ./st_ui/cicd/run_smoke_test.sh

    - name: Push Docker Image
      run: |
        docker push $IMAGE_NAME:$IMAGE_TAG

    - name: Cleanup
      if: always()
      run: ./st_ui/cicd/teardown_test_instance.sh

  post-push-smoke-test:
    name: Post-Push Smoke Test
    runs-on: ubuntu-latest
    needs: build-test-push

    steps:
    - name: Pull Docker Image
      env:
        IMAGE_NAME: ${{ needs.build-test-push.outputs.image_name }}
        IMAGE_TAG: ${{ needs.build-test-push.outputs.image_tag }}
      run: |

        # Exit on failure
        set -e

        # Pull image
        docker pull $IMAGE_NAME:$IMAGE_TAG

        # Setup, test, teardown
        ./st_ui/cicd/setup_test_instance.sh
        ./st_ui/cicd/run_smoke_test.sh
        ./st_ui/cicd/teardown_test_instance.sh
