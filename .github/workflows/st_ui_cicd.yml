name: Streamlit UI Build Test Deploy

on:
  # Manual run
  workflow_dispatch:

  # Tigger on unit test completion
  workflow_run:
    workflows:
      - Pytest
    types:
      - completed

# Need permissions to publish
permissions:
  contents: read
  packages: write

jobs:
  build-test-push:
    name: Build Docker Image
    runs-on: ubuntu-latest

    # Check success if this was tiggered by another workflow run
    if: ${{ github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}

    outputs:
      image_name: ${{ steps.build-image.outputs.image_name }}
      image_tag: ${{ steps.build-image.outputs.image_tag }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build Docker Image
      id: build-image
      run: |

        # Exit on failure
        set -e

        # Image name from provenance - ensure lower case
        IMAGE_NAME=$(echo "ghcr.io/${{ github.repository_owner }}/${{ github.repository }}/st_ui" | tr '[:upper:]' '[:lower:]')

        # Set tag to 'latest' for main, pr on pr or branch name on branch
        if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            # It's a pull request - tag with pr number and run id
            IMAGE_TAG=pr-${{ github.event.pull_request.number }}-${{ github.run_id }}
        elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            # Its main branch - tag as latest
            IMAGE_TAG=latest
        else
            # Its on a branch - tag with branch name
            IMAGE_TAG=$(echo "${{ github.ref }}" | sed 's/refs\/heads\///')
        fi

        # Build the image
        docker build -f ./st_ui/cicd/Dockerfile --cache-from $IMAGE_NAME:latest -t $IMAGE_NAME:$IMAGE_TAG .

        # Save to environment variables
        echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV
        echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

        # Save to job output
        echo "image_name=$IMAGE_NAME" >> $GITHUB_OUTPUT
        echo "image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Pre Push Smoke Test
      run: |

        # Exit on failure
        set -e

        # Run it
        docker run -d --name streamlit-test -p 8501:8501 $IMAGE_NAME:${IMAGE_TAG:-latest}

        # Smoke test it
        chmod +x ./st_ui/cicd/run_smoke_test.sh
        ./st_ui/cicd/run_smoke_test.sh

    - name: Push Docker Image
      run: |
        docker push $IMAGE_NAME:$IMAGE_TAG

    - name: Cleanup
      if: always()
      run: |

        # Stop and remove container
        docker stop streamlit-test
        docker rm streamlit-test

  post-push-smoke-test:
    name: Post-Push Smoke Test
    runs-on: ubuntu-latest
    needs: build-test-push

    steps:
    - name: Pull Docker Image
      env:
        IMAGE_NAME: ${{ needs.build-test-push.outputs.image_name }}
        IMAGE_TAG: ${{ needs.build-test-push.outputs.image_tag }}
      run: |

        # Exit on failure
        set -e

        # Pull image
        docker pull $IMAGE_NAME:$IMAGE_TAG

        # Run it
        docker run -d --name streamlit-test -p 8501:8501 $IMAGE_NAME:${IMAGE_TAG:-latest}

        # Smoke test it
        chmod +x ./st_ui/cicd/run_smoke_test.sh
        ./st_ui/cicd/run_smoke_test.sh

    - name: Cleanup
      if: always()
      run: |

        # Stop and remove container
        docker stop streamlit-test
        docker rm streamlit-test
