name: ST UI Build Test Deploy

on:
  # Manual run
  workflow_dispatch:

  # Tigger on unit test completion
  workflow_run:
    workflows:
      - Pytest
    types:
      - completed

# Need permissions to publish
permissions:
  contents: read
  packages: write

jobs:
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest

    # Check success if this was tiggered by another workflow run
    if: ${{ github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}

    outputs:
      image_name: ${{ steps.set-env.outputs.image_name }}
      image_tag: ${{ steps.set-env.outputs.image_tag }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build Docker Image
      id: build-image
      run: |
        set -e

        IMAGE_NAME=$(echo "ghcr.io/${{ github.repository_owner }}/${{ github.repository }}/st_ui" | tr '[:upper:]' '[:lower:]')

        if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            TAG=pr-${{ github.event.pull_request.number }}-${{ github.run_id }}
        elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            TAG=latest
        else
            TAG=$(echo "${{ github.ref }}" | sed 's/refs\/heads\///')
        fi

        # Build the image
        docker build --cache-from $IMAGE_NAME:latest -t $IMAGE_NAME:$TAG .

        # Save the image name and tag
        echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV
        echo "IMAGE_TAG=$TAG" >> $GITHUB_ENV

    - name: Set Output
      id: set-env
      run: |
        run: echo "{image_name}={$IMAGE_NAME}" >> $GITHUB_OUTPUT
        run: echo "{image_tag}={$TAG}" >> $GITHUB_OUTPUT

  pre-push-smoke-test:
    name: Pre-Push Smoke Test
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Run Docker Container
      run: |
        IMAGE_NAME=${{ needs.build.outputs.image_name }}
        IMAGE_TAG=${{ needs.build.outputs.image_tag }}
        docker run -d --name streamlit-test -p 8501:8501 $IMAGE_NAME:${IMAGE_TAG:-latest}
        sleep 10  # Allow time for the app to start

    - name: Test HTTP Response
      run: |
        RESPONSE=$(curl -s http://localhost:8501)
        echo "$RESPONSE"

        # Check for expected HTTP response and string
        echo "$RESPONSE" | grep "You need to enable JavaScript to run this app" || exit 1

    - name: Cleanup
      if: always()
      run: |
        docker stop streamlit-test
        docker rm streamlit-test

  push:
    name: Push Docker Image
    runs-on: ubuntu-latest
    needs: pre-push-smoke-test  # Ensures smoke test must pass before push

    steps:
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Push Docker Image
      run: |
        IMAGE_NAME=${{ needs.build.outputs.image_name }}
        IMAGE_TAG=${{ needs.build.outputs.image_tag }}
        docker push $IMAGE_NAME:${IMAGE_TAG:-latest}

  post-push-smoke-test:
    name: Post-Push Smoke Test
    runs-on: ubuntu-latest
    needs: push  # Ensures push step must complete successfully

    steps:
    - name: Pull Docker Image
      run: |
        docker pull ${{ needs.build.outputs.image_name }}:${{ needs.build.outputs.image_tag }}

    - name: Run Docker Container
      run: |
        docker run -d --name streamlit-test -p 8501:8501 ${{ needs.build.outputs.image_name }}:${{ needs.build.outputs.image_tag }}
        sleep 10  # Allow time for the app to start

    - name: Test HTTP Response
      run: |
        RESPONSE=$(curl -s http://localhost:8501)
        echo "$RESPONSE"

        # Check for expected HTTP response and string
        echo "$RESPONSE" | grep "Streamlit" || exit 1
        echo "$RESPONSE" | grep "Multi-Step Form" || exit 1

    - name: Cleanup
      if: always()
      run: |
        docker stop streamlit-test
        docker rm streamlit-test
